#!/usr/bin/env stack
-- stack --resolver lts-14.13 script --package typed-process --package bytestring

{-# LANGUAGE OverloadedStrings #-}

import Control.Monad
import System.Environment
import System.Exit
import System.IO
import System.Process.Typed
import Data.String
import qualified Data.ByteString.Lazy as BS

main :: IO ()
main = do
  args <- getArgs
  case args of
    [year, day] -> do
      let src = year <> "/" <> day <> "/Main.hs"
          repl = setStdin createPipe
                 . setStdout inherit
                 . setStderr inherit
                 $ proc "stack" ["ghci"]
      withProcessWait repl $ \p -> do
        let h = getStdin p
        hPutStrLn h (":load " <> fromString src)
        hFlush h
        forever $ do
          hGetLine stdin >>= hPutStrLn h >> hFlush h
        hClose stdin >> hClose h
    _ -> die "At least two arguments expected"

-- vim: syntax=haskell
