#!/usr/bin/env stack
-- stack --resolver lts-14.13 script --package typed-process --package bytestring

{-# LANGUAGE OverloadedStrings #-}

import System.Environment
import System.Exit
import System.IO
import System.Process.Typed
import qualified Data.ByteString.Lazy as BS

main :: IO ()
main = do
  args <- getArgs
  case args of
    (year : day : rst) -> do
      let exe = year <> "/" <> day <> "/Main"
      (exitCode, out, err) <- readProcess $ proc "make" [exe]
      case exitCode of
        ExitSuccess -> runProcess (proc exe rst) >>= exitWith
        _ -> BS.hPut stderr err >> exitWith exitCode 
    _ -> die "At least two arguments expected"

-- vim: syntax=haskell
