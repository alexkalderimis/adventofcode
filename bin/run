#!/usr/bin/env stack
-- stack --resolver lts-14.13 script --package directory --package typed-process --package bytestring

{-# LANGUAGE OverloadedStrings #-}

import System.Environment
import System.Directory
import System.Exit
import System.IO
import System.Process.Typed
import qualified Data.ByteString.Lazy as BS

main :: IO ()
main = do
  args <- getArgs
  case args of
    (year : day : rst) -> do
      let exe = year <> "/" <> day <> "/Main"
          input = year <> "/" <> day <> "/input"
      (exitCode, out, err) <- readProcess (proc "make" [exe])
      case exitCode of
        ExitSuccess -> do
          f <- case rst of
            ["test"] -> pure id
            _        -> do exists <- doesFileExist input
                           if exists
                             then setStdin . useHandleClose <$> openFile input ReadMode
                             else pure id
          runProcess (f $ proc exe rst) >>= exitWith
        _ -> BS.hPut stderr err >> exitWith exitCode 
    _ -> die "At least two arguments expected"

-- vim: syntax=haskell
